{% extends 'base.html.twig' %}

{% block javascripts %}
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
    <script src="//code.jquery.com/jquery-1.12.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN" crossorigin="anonymous"></script>
    <script src="{{ asset('lecture-optique/port.js') }}"></script>

    <script>

        //configuration de la lecture des champs de la feuille 
        const sheet_fid_content = {
            code_barre: {name: 'code_barre', type: 'int', length: 8},
            nom: {name: 'nom', type: 'string', length: 15},
            prenom: {name: 'prenom', type: 'string', length: 11},
            nom_jeune_fille: {name: 'nom_jeune_fille', type: 'string', length: 13},
            niveau_scolaire: {name: 'niveau_scolaire', type: 'choice', length: 1, choice: ['CEP', 'CAP-BEP-BEPC', 'niveau BAC', 'BAC', 'BAC+1', 'BAC+2', 'license ou maitrise', 'ingénieur ou troisème cycle']},
            date_naissance: {name: 'date_naissance', type: 'date', length: 6},
            sexe: {name: 'sexe', type: 'choice', lenght: 1, choice: ['M', 'F']},
            concours: {name: 'concours', type: 'choice', lenght: 1, choice: ['E', 'I', 'R', 'S']},
            SGAP: {name: 'SGAP', type: 'int', length: 2},
            date_examen: {name: 'date_examen', type: 'date', length: 6},
            type_concours: {name: 'type_concours', type: 'int', length: 2},
            batterie: {name: 'batterie', type: 'int', length: 3},
            reserve: {name: 'reserve', type: 'int', length: 5},
            option_1: {name: 'option_1', type: 'int', length: 4},
            option_2: {name: 'option_2', type: 'int', length: 6},
        };


        //on définit comment interpréter chaque champs

        const reader = {
            code_barre: function (read) {
                if (read.match(/[0-9]{8}/)) {
                    if (hasFID(read)) {
                        return [read, false, function (running_fid) {
                                askUserAlreadyRead(running_fid);
                            }];
                    }
                    return [read, true, null];
                } else {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'code_barre', "Le code barre n'est pas valide", "?");
                        }];
                }
            },
            nom: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'nom', "Une colonne est cochée deux fois ou plus", "?");
                        }];
                } else {
                    if (read.match(/[A-Z]\s[A-Z]/)) {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'nom', "Il y a un espace dans la réponse", "?");
                            }];
                    } else {
                        return [read, true, null];
                    }

                }
            },
            prenom: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'prenom', "Une colonne est cochée deux fois ou plus", "?");
                        }];
                } else {
                    if (read.match(/[A-Z]\s[A-Z]/)) {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'prenom', "Il y a un espace dans la réponse", "?");
                            }];
                    } else {
                        return [read, true, null];
                    }

                }
            },
            nom_jeune_fille: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'nom_jeune_fille', "Une colonne est cochée deux fois ou plus", "?");
                        }];
                } else {
                    if (read.match(/[A-Z]\s[A-Z]/)) {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'nom_jeune_fille', "Il y a un espace dans la réponse", "?");
                            }];
                    } else {
                        if (read.match(/\s{13}/)) {
                            return ['non renseigné', true, null];
                        } else {
                            return [read, true, null];
                        }
                    }

                }
            },
            niveau_scolaire: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserChoice(running_fid, 'niveau_scolaire', "Une colonne est cochée deux fois ou plus", sheet_fid_content.niveau_scolaire.choice, "?");
                        }];
                } else {
                    if (read.match(/[1-8]/)) {
                        return [sheet_fid_content.niveau_scolaire.choice[parseInt(read) - 1], true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserChoice(running_fid, 'niveau_scolaire', "Réponse absente ou invalide", sheet_fid_content.niveau_scolaire.choice, "?");
                            }];
                    }

                }
            },
            date_naissance: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'date_naissance', "Une colonne est cochée deux fois ou plus", "?", true);
                        }];
                } else {
                    if (read.match(/[0-3][0-9][0-1][0-9]{3}/)) {
                        return [read[0] + read[1] + '/' + read[2] + read[3] + '/' + read[4] + read[5] + read[6] + read[7], true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'date_naissance', "Réponse absente ou invalide", "?", true);
                            }];
                    }

                }
            },
            sexe: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserChoice(running_fid, 'sexe', "Une colonne est cochée deux fois ou plus", sheet_fid_content.sexe.choice, "?");
                        }];
                } else {
                    if (read.match(/[1-2]/)) {
                        return [sheet_fid_content.sexe.choice[parseInt(read) - 1], true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserChoice(running_fid, 'sexe', "Réponse absente ou invalide", sheet_fid_content.sexe.choice, "?");
                            }];
                    }

                }
            },
            concours: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserChoice(running_fid, 'concours', "Une colonne est cochée deux fois ou plus", sheet_fid_content.concours.choice, "?");
                        }];
                } else {
                    if (read.match(/[EIRS]/)) {
                        return [read, true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserChoice(running_fid, 'concours', "Réponse absente ou invalide", sheet_fid_content.concours.choice, "?");
                            }];
                    }

                }
            },
            SGAP: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'SGAP', "Une colonne est cochée deux fois ou plus", "?");
                        }];
                } else {
                    if (read.match(/[0-9]{2}/)) {
                        return [read, true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'SGAP', "Le nombre est absent ou incorrect", "?");
                            }];
                    }
                }
            },
            date_examen: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'date_examen', "Une colonne est cochée deux fois ou plus", "?", true);
                        }];
                } else {
                    if (read.match(/[0-3][0-9][0-1][0-9]{3}/)) {
                        return [read[4] + read[5] + read[6] + read[7] + '-' + read[2] + read[3] + '-' + read[0] + read[1], true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'date_examen', "Réponse absente ou invalide", "?", true);
                            }];
                    }

                }
            },
            type_concours: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'type_concours', "Une colonne est cochée deux fois ou plus", "?");
                        }];
                } else {
                    if (read.match(/[0-9]{2}/)) {
                        return [read, true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'type_concours', "Le nombre est absent ou incorrect", "?");
                            }];
                    }
                }
            },
            batterie: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'batterie', "Une colonne est cochée deux fois ou plus", "?");
                        }];
                } else {
                    if (read.match(/[0-9]{3}/)) {
                        return [read, true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'batterie', "Le nombre est absent ou incorrect", "?");
                            }];
                    }
                }
            },
            reserve: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'reserve', "Une colonne est cochée deux fois ou plus", "?");
                        }];
                } else {
                    if (read.match(/[0-9]{5}/)) {
                        return [read, true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'reserve', "Le nombre est absent ou incorrect", "?");
                            }];
                    }
                }
            },
            option_1: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'option_1', "Une colonne est cochée deux fois ou plus", "?");
                        }];
                } else {
                    if (read.match(/[0-9]{4}/)) {
                        return [read, true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'option_1', "Le nombre est absent ou incorrect", "?");
                            }];
                    }
                }
            },
            option_2: function (read) {
                if (read.match(/[?]/)) {
                    return [read, false, function (running_fid) {
                            askUserText(running_fid, 'option_2', "Une colonne est cochée deux fois ou plus", "?");
                        }];
                } else {
                    if (read.match(/[0-9]{6}/)) {
                        return [read, true, null];
                    } else {
                        return [read, false, function (running_fid) {
                                askUserText(running_fid, 'option_2', "Le nombre est absent ou incorrect", "?");
                            }];
                    }
                }
            }
        };

        // on part du proncipe qu'on m'a fourni un objet du type
        const request = {
            code_barre: {asked: true, value: false, print: true},
            nom: {asked: true, value: false, print: true},
            prenom: {asked: true, value: false, print: true},
            nom_jeune_fille: {asked: true, value: false, print: true},
            niveau_scolaire: {asked: true, value: false, print: true},
            date_naissance: {asked: true, value: false, print: true},
            sexe: {asked: true, value: false, print: true},
            concours: {asked: true, value: 'E', print: true},
            SGAP: {asked: true, value: false, print: true},
            date_examen: {asked: true, value: false, print: true},
            type_concours: {asked: true, value: false, print: true},
            batterie: {asked: true, value: false, print: true},
            reserve: {asked: true, value: false, print: true},
            option_1: {asked: false, value: false, print: true},
            option_2: {asked: true, value: false, print: true},
        };

        var test_void_running_fid = {
            code_barre: {read: '12834589', treated: false, value: null},
            nom: {read: 'COLLARD', treated: false, value: null},
            prenom: {read: 'JULIEN', treated: false, value: null},
            nom_jeune_fille: {read: "             ", treated: false, value: null},
            niveau_scolaire: {read: "3", treated: false, value: null},
            date_naissance: {read: "10122?01", treated: false, value: null},
            sexe: {read: "1", treated: false, value: null},
            concours: {read: "E", treated: false, value: null},
            SGAP: {read: "23", treated: false, value: null},
            date_examen: {read: "22012023", treated: false, value: null},
            type_concours: {read: "12", treated: false, value: null},
            batterie: {read: "876", treated: false, value: null},
            reserve: {read: "73840", treated: false, value: null},
            option_1: {read: "3563", treated: false, value: null},
            option_2: {read: "926384", treated: false, value: null},
        };

        var test_void_running_fid_bis = {
            code_barre: {read: '12834589', treated: false, value: null},
            nom: {read: 'COLLARD', treated: false, value: null},
            prenom: {read: 'JULIEN', treated: false, value: null},
            nom_jeune_fille: {read: "             ", treated: false, value: null},
            niveau_scolaire: {read: "3", treated: false, value: null},
            date_naissance: {read: "10122?01", treated: false, value: null},
            sexe: {read: "1", treated: false, value: null},
            concours: {read: "E", treated: false, value: null},
            SGAP: {read: "23", treated: false, value: null},
            date_examen: {read: "22012023", treated: false, value: null},
            type_concours: {read: "12", treated: false, value: null},
            batterie: {read: "876", treated: false, value: null},
            reserve: {read: "73840", treated: false, value: null},
            option_1: {read: "3563", treated: false, value: null},
            option_2: {read: "926384", treated: false, value: null},
        };


        // /18500431COLLAR?        JULIEN                 81012011E1320012354321               /



        var fid1 = {
            code: 1853627,
            nom: "COLLARD",
            prenom: "JULIEN",
            jeune_fille: "",
            naissance: "10/12/2001",
            niveau_scolaire: "ingénieur",
            sexe: "M",
            date_examun: "21/01/2023"
        };
        var fid12 = {
            code: 1893627,
            nom: "COLLARD",
            prenom: "TIB",
            jeune_fille: "",
            naissance: "10/12/2001",
            niveau_scolaire: "ingénieur",
            sexe: "M",
            date_examun: "21/01/2023"
        };


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        //déclaration des tableaux

        var FIDs = [];
        var QCMs = [];

        var columnDefs = [];

        for (var name in sheet_fid_content) {
            var field = sheet_fid_content[name];
            if (request[name].print) {
                switch (field.type) {
                    case 'date':
                        columnDefs.push({field: name, type: 'dateColumn'});
                        break;
                    case 'choice':
                        columnDefs.push({field: name, cellEditor: 'agSelectCellEditor', cellEditorParams: {values: field.choice}});
                        break;
                    default:
                        columnDefs.push({field: name});
                }
            }
        }

        const gridOptions = {
            columnDefs: columnDefs,
            rowData: FIDs,
            defaultColDef: {
                sortable: true,
                filter: true,
                editable: true
            },
            columnTypes: {
                dateColumn: {
                    filter: 'agDateColumnFilter',
                    //filterParams: {comparator: myDateComparator},
                    suppressMenu: true
                }
            },
        };
        var ag = null;
        // setup the grid after the page has finished loading
        document.addEventListener('DOMContentLoaded', () => {
            const gridDiv = document.querySelector('#myGrid');
            ag = new agGrid.Grid(gridDiv, gridOptions);
        });


        //fonction d'ajout d'une fid au tableau
        function store(fid) {
            FIDs = FIDs.concat([fid])
            gridOptions.api.setRowData(FIDs);
        }

        function hasFID(code_barre) {
            return FIDs.findIndex((e) => e.code_barre === code_barre) !== -1;
        }

        function hasQCMs(code_barre) {
            return QCMs.findIndex((e) => e.code_barre === code_barre) !== -1;
        }

        function removeFID(code_barre) {
            FIDs = FIDs.splice(FIDs.findIndex((e) => e.code_barre === code_barre), 1);
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        //bloc de travail avec le port

        var port = null;

        async function connect() {
            port = await navigator.serial.requestPort();
            await port.open({baudRate: 19200});
            read();
        }

        //séquence de fin des réponses du lecteur
        const end = "\r\n\x03\x04";
        const errors = [
            {sequence: '', name: ''}
        ];

        var answer_cache = "";

        async function read() {
            //une fois lancée, la fonction écoute en permanance le port et écrit sur le cache de réponse
            const reader = port.readable.getReader();
            while (true) {
                const {value, done} = await reader.read();
                if (done) {
                    reader.releaseLock();
                    break;
                }
                answer_cache += new TextDecoder().decode(value);
            }
        }

        async function tell(commande) {
            //on vide le cache
            answer_cache = "";

            //envoie de la requete
            const writer = port.writable.getWriter();
            await writer.write(new TextEncoder().encode(commande));
            writer.releaseLock();

        }

        async function get(commande) {
            //on vide le cache
            answer_cache = "";

            //envoie de la requete
            const writer = port.writable.getWriter();
            await writer.write(new TextEncoder().encode(commande));
            writer.releaseLock();

            //protection en cas de non réponse du lecteur
            function timeout(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            //on écoute la réponse

            for (let n = 0; n < 300; n++) {
                await timeout(10);
                if (answer_cache.indexOf(end) !== -1) {
                    return answer_cache;
                }
            }
            return false;
        }


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        //fonction de demande d'intervention

        async function askUserText(running_fid, field, message, if_not_determined, date = false) {
            var value = running_fid[field].value;
            $("#manual-text .champs").text(field);
            $("#manual-text .message").text(message);
            $("#manual-text input").attr('type', 'text');
            if (date) {
                console.log('date');
                $("#manual-text input").attr('type', 'date');
            }

            $("#manual-text input").val(value);
            $("#manual-text").modal("show");
            $("#manual-text .valider").off();
            $("#manual-text .indetermine").off();
            $("#manual-text input").keypress(function (e) {
                var keycode = (e.keyCode ? e.keyCode : e.which);
                if (keycode == '13') {
                    e.preventDefault();
                    $("#manual-text .valider").click();
                }
            });
            $("#manual-text .valider").click(function () {
                running_fid[field].value = $("#manual-text input").val();
                running_fid[field].treated = true;
                read_FID(running_fid);
            });
            $("#manual-text .indetermine").click(function () {
                running_fid[field].value = if_not_determined;
                running_fid[field].treated = true;
                read_FID(running_fid);
            });
        }

        async function askUserChoice(running_fid, field, message, choice, if_not_determined) {
            $("#manual-choice .champs").text(field);
            $("#manual-choice .message").text(message);
            var select_text = '';
            for (var option in choice) {
                select_text += '<option value="' + choice[option] + '">' + choice[option] + '</option>';
            }
            $("#manual-choice select").append(select_text);
            $("#manual-choice").modal("show");
            $("#manual-choice .valider").off();
            $("#manual-choice .indetermine").off();
            $("#manual-choice .valider").click(function () {
                running_fid[field].value = $("#manual-choice select").val();
                running_fid[field].treated = true;
                read_FID(running_fid);
            });
            $("#manual-choice .indetermine").click(function () {
                running_fid[field].value = if_not_determined;
                running_fid[field].treated = true;
                read_FID(running_fid);
            });
            $("#manual-choice select").keypress(function (e) {
                var keycode = (e.keyCode ? e.keyCode : e.which);
                if (keycode == '13') {
                    e.preventDefault();
                    $("#manual-choice .valider").click();
                }
            });
        }

        async function askUserConfirm(running_fid, field, given, expected) {
            $("#manual-confirm .champs").text(field);
            $("#manual-confirm .attendu").text(expected);
            $("#manual-confirm .donne").text(given);
            $("#manual-confirm").modal("show");
            $("#manual-confirm .valider").off();
            $("#manual-confirm .ignorer").off();
            $("#manual-confirm .valider").click(function () {
                running_fid[field].value = expected;
                running_fid[field].treated = true;
                read_FID(running_fid);
            });
            $("#manual-confirm .ignorer").click(function () {
                FID();
            });
            $("#manual-confirm").keypress(function (e) {
                var keycode = (e.keyCode ? e.keyCode : e.which);
                if (keycode == '13') {
                    e.preventDefault();
                    $("#manual-confirm .valider").click();
                }
            });
        }

        async function askUserAlreadyRead(running_fid) {
            $("#manual-already").modal("show");
            $("#manual-already .valider").off();
            $("#manual-already .ignorer").off();
            $("#manual-already .valider").click(function () {
                running_fid['code_barre'].treated = true;
                removeFID(running_fid['code_barre'].value);
                read_FID(running_fid);
            });
            $("#manual-already .ignorer").click(function () {
                FID();
            });
        }

        async function askUserQCM(running_qcm, question, message) {
            $("#manual-qcm").modal("show");
            $("#manual-qcm .message").text(message);
            $("#manual-qcm .question").text(question + 1);
            $("#manual-qcm .valider").off();
            $("#manual-qcm .ignorer").off();
            $("#manual-qcm .valider").click(function () {
                running_qcm[question] = $('#manual-qcm input[name=reponseQCM]:checked').val();
                read_QCM(running_qcm, question + 1);
            });
            $("#manual-already .ignorer").click(function () {
                running_qcm[question] = '?';
                read_QCM(running_qcm, question + 1);
            });
        }




        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        // lecture des FIDs


        async function FID() {
            //lit les pages identité disponibles
            $("#spinner-fid").show();

            //code await ...

            $("#spinner-fid").hide();

        }

        async function read_FID(running_fid) {
            for (var field in running_fid) {
                var state = running_fid[field];
                console.log('Traitement de ' + field);
                if (!state.treated) {
                    if (request[field].asked) {
                        console.log(state);
                        var [value, valid, f] = reader[field](state.read);
                        if (valid) {
                            if (request[field].value !== false) {
                                if (value !== request[field].value) {
                                    return askUserConfirm(running_fid, field, value, request[field].value);
                                }
                            }
                            state.value = value;
                            state.treated = true;
                        } else {
                            //await tell('S');
                            state.value = value;
                            return f(running_fid);
                        }
                    } else {
                        state.value = 'not asked';
                        state.treated = true;
                    }
                }
            }
            //await tell('G');
            //la fid a été complétement traité
            var fid = {};
            console.log(running_fid);
            for (var field in running_fid) {
                fid[field] = running_fid[field].value;
            }
            //on stocke la fid
            console.log(fid);
            store(fid);
            //on passe à la suivante
            FID()
        }


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        //lecture des QCMs

        async function QCM() {
            //lit les pages qcm disponibles
        }




        $(document).ready(function () {
            $("#spinner-fid").hide();
            $("#spinner-qcm").hide();



            //gestion des modals
        });


    </script>
{% endblock %}

{% block content %}
    <br>
    <h1>Lecture de feuilles par lecteur optique</h1>
    <br>

    <p class="lead">Session : </p>
    <p><em>Description de la session ici</em></p>



    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">1. Connection à l'appareil</h5>
            <p class="card-text">Le lecteur doit être connecté à l'ordinateur avant de lancer l'opération.</p>
            <button class="btn btn-primary" onclick="connect()">
                Connecter le lecteur optique 
            </button>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">2. Lecture des pages identité</h5>
            <p class="card-text">Placez les pages d'identification et lancez la procédure</p>
            <div class='row'>
                <div class='col-2'>
                    <button class="btn btn-primary" onclick="FID()">
                        Lire les FID 
                    </button>
                </div>
                <div class='col-1'>
                    <div id='spinner-fid' class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <div class='col-4'>
                    <p class="card-text">Pages lues : <span id='nb-fid-lues'></span></p>
                </div>
                <div class='col-4'>
                    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                        Voir le détail
                    </button>
                </div>
            </div>
            <div class="collapse mt-3" id="collapseExample">
                <div class="card card-body">

                    <div id="myGrid" style="height: 200px;" class="ag-theme-alpine"></div>


                </div>
            </div>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">3. Lecture des pages réponses</h5>
            <p class="card-text">Placez les pages de réponse au QCM et lancez la procédure</p>
            <div class='row'>
                <div class='col-2'>
                    <button class="btn btn-primary" onclick="QCM()">
                        Lire les QCMs
                    </button>
                </div>
                <div class='col-1'>
                    <div id='spinner-qcm' class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <div class='col-4'>
                    <p class="card-text">Pages lues : <span id='nb-qcm-lues'></span></p>
                </div>
            </div>
        </div>
    </div>




    <!-- Modal -->
    <div class="modal modal-lg" id="manual-text" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Intervention manuelle</h1>
                </div>
                <div class="modal-body">
                    <p>Problème rencontré pour le champs <strong class='champs'></strong>.</p>
                    <p><em class='message'></em></p>
                    <form>
                        <input type='text' class='form-control'>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-warning indetermine" data-bs-dismiss="modal">Reste indéternimé</button>
                    <button type="button" class="btn btn-success valider" data-bs-dismiss="modal">Valider</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal modal-lg" id="manual-choice" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Intervention manuelle</h1>
                </div>
                <div class="modal-body">
                    <p>Problème rencontré pour le champs <strong class='champs'></strong>.</p>
                    <p><em class='message'></em></p>
                    <form>
                        <select class="form-select"></select>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-warning indetermine" data-bs-dismiss="modal">Reste indéternimé</button>
                    <button type="button" class="btn btn-success valider" data-bs-dismiss="modal">Valider</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal modal-lg" id="manual-confirm" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Intervention manuelle</h1>
                </div>
                <div class="modal-body">
                    <p>Problème rencontré pour le champs <strong class='champs'></strong>.</p>
                    <p>La valeur attendu pour cette session est : <spam class='attendu'></spam></p>
                    <p>Le candidat a renseigné : <spam class='donne'></spam></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success valider" data-bs-dismiss="modal">Corriger et continuer</button>
                    <button type="button" class="btn btn-warning ignorer" data-bs-dismiss="modal">Ignorer cette page et continuer</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal modal-lg" id="manual-already" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Intervention manuelle</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Cette FID a déjà été lue !</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success valider" data-bs-dismiss="modal">La recorriger</button>
                    <button type="button" class="btn btn-warning ignorer" data-bs-dismiss="modal">Ignorer cette page et continuer</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal modal-lg" id="manual-qcm" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Intervention manuelle</h1>
                </div>
                <div class="modal-body">
                    <p>Problème de lecture à la question <strong class="question"></strong></p>
                    <p><em class="message"></em></p>
                    <form>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="reponseQCM" value='A'>
                            <label class="form-check-label">
                                A
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="reponseQCM" value='B'>
                            <label class="form-check-label">
                                B
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="reponseQCM" value='C'>
                            <label class="form-check-label">
                                C
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="reponseQCM" value='D'>
                            <label class="form-check-label">
                                D
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="reponseQCM" value='E'>
                            <label class="form-check-label">
                                E
                            </label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success valider" data-bs-dismiss="modal">Valider</button>
                    <button type="button" class="btn btn-warning ignorer" data-bs-dismiss="modal">Ignorer cette question</button>
                </div>
            </div>
        </div>
    </div>
    
   



{% endblock %}
